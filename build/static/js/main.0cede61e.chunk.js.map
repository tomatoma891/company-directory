{"version":3,"sources":["components/Wrapper/index.js","components/Header/index.js","utils/API.js","components/TableHeader/index.js","components/Nav/index.js","components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Header","axios","get","TableHeader","Nav","searchFilter","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","placeholder","onChange","e","Table","useState","users","setUsers","filteredUsers","setFilteredUsers","sortOrder","setSortOrder","useEffect","API","then","results","data","filter","target","value","filteredUserList","item","Object","values","join","toLowerCase","indexOf","onClick","console","log","reverse","map","login","name","picture","phone","email","dob","key","uuid","src","thumbnail","alt","first","last","age","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+PAUeA,MARf,SAAiBC,GACb,OACI,yBAAKC,UAAU,WACVD,EAAME,WCMJC,EATA,WACX,OACI,yBAAKF,UAAU,6BACX,oD,wBCHG,EACD,WACN,OAAOG,IAAMC,IAAI,kDCYVC,EAbK,WAChB,OACI,4BACI,qCACA,oCACA,6CACA,qCACA,qCCkBGC,EA1BH,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAGX,OACI,yBAAKP,UAAU,kDACX,4BAAQA,UAAU,iBAAiBQ,KAAK,SAASC,cAAY,WAAWC,cAAY,iBAAiBC,gBAAc,gBAAgBC,gBAAc,QAAQC,aAAW,qBAChK,0BAAMb,UAAU,yBAGpB,yBAAKA,UAAU,2BAA2Bc,GAAG,iBACzC,0BAAMd,UAAU,4BACZ,2BACIA,UAAU,uBACVQ,KAAK,SACLO,YAAY,SACZC,SAAU,SAAAC,GAAC,OAAIV,EAAaU,UCgDrCC,EA3DD,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAE0BF,mBAAS,IAFnC,mBAETG,EAFS,KAEMC,EAFN,OAGkBJ,mBAAS,UAH3B,mBAGTK,EAHS,KAGEC,EAHF,KAKhBC,qBAAU,WACNC,IAAeC,MAAK,SAAAC,GAChBR,EAASQ,EAAQC,KAAKD,SACtBN,EAAiBM,EAAQC,KAAKD,cAEnC,CAACJ,IAmBJ,OACI,oCACI,kBAAC,EAAD,CAAKlB,aAnBQ,SAACU,GAClB,IAAMc,EAASd,EAAEe,OAAOC,MAClBC,EAAmBd,EAAMW,QAAO,SAAAI,GAElC,OAAiD,IADpCC,OAAOC,OAAOF,GAAMG,KAAK,IAAIC,cAC5BC,QAAQT,EAAOQ,kBAEjChB,EAAiBW,MAeb,4BAAQ1B,KAAK,SAASR,UAAU,uBAAuByC,QAZ7C,SAACxB,GACXO,IACAkB,QAAQC,IAAI,eACZlB,EAAa,WACbF,EAAiBD,EAAcsB,cAQ/B,iBAEA,2BAAO5C,UAAU,0BACb,+BACI,kBAAC,EAAD,MACCsB,EAAcuB,KAAI,YAAkD,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACtD,OAEI,wBAAIC,IAAKN,EAAMO,MACX,gCAAK,yBAAKC,IAAKN,EAAQO,UAAWC,IAAKT,KACvC,4BAAKA,EAAKU,MAAV,IAAkBV,EAAKW,MACvB,4BAAKT,GACL,4BAAKC,GACL,4BAAKC,EAAIQ,a,MCnC1BC,MAXf,WACE,OACE,yBAAK5D,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCY6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.0cede61e.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Wrapper(props) {\n    return (\n        <div className='wrapper'>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Wrapper;","import React from 'react';\n\nconst Header = () => {\n    return (\n        <div className='header text-primary py-5 '>\n            <h1>Employee Directory</h1>\n        </div>\n    )\n\n}\n\nexport default Header;","import axios from 'axios';\n\nexport default {\n    getUsers: function () {\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n    }\n};","import React from 'react';\n// import Table from '../Table'\n\nconst TableHeader = () => {\n    return (\n        <tr>\n            <th >Photo</th>\n            <th >Name</th>\n            <th >Contact Phone</th>\n            <th >email</th>\n            <th >Age</th>\n        </tr>\n    )\n\n}\n\nexport default TableHeader;","import React from 'react';\n\nconst Nav = ({ searchFilter }) => {\n\n\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor01\" aria-controls=\"navbarColor01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarColor01\">\n                <form className=\"form-inline my-2 my-lg-0\">\n                    <input\n                        className=\"form-control mr-sm-2\"\n                        type=\"search\"\n                        placeholder=\"Search\"\n                        onChange={e => searchFilter(e)}\n                    />\n                </form>\n\n            </div>\n        </nav>\n\n    )\n\n}\n\nexport default Nav;","import React, { useState, useEffect } from 'react';\nimport API from '../../utils/API';\nimport TableHeader from '../TableHeader';\nimport Nav from '../Nav';\n\n\nconst Table = () => {\n    const [users, setUsers] = useState([]);\n    const [filteredUsers, setFilteredUsers] = useState([]);\n    const [sortOrder, setSortOrder] = useState('ascend');\n\n    useEffect(() => {\n        API.getUsers().then(results => {\n            setUsers(results.data.results)\n            setFilteredUsers(results.data.results)\n        })\n    }, [setSortOrder]);\n\n    const searchFilter = (e) => {\n        const filter = e.target.value;\n        const filteredUserList = users.filter(item => {\n            let values = Object.values(item).join(\"\").toLowerCase();\n            return values.indexOf(filter.toLowerCase()) !== -1;\n        });\n        setFilteredUsers(filteredUserList);\n    }\n\n    const sortNames = (e) => {\n        if (sortOrder) {\n            console.log('test button')\n            setSortOrder('descend')\n            setFilteredUsers(filteredUsers.reverse())\n        }\n    }\n\n    return (\n        <>\n            <Nav searchFilter={searchFilter} />\n\n            <button type=\"button\" className=\"btn btn-primary mt-2\" onClick={sortNames} >Re-Sort Names</button>\n\n            <table className='table table-hover mt-5'>\n                <tbody>\n                    <TableHeader />\n                    {filteredUsers.map(({ login, name, picture, phone, email, dob }) => {\n                        return (\n\n                            <tr key={login.uuid}>\n                                <td> <img src={picture.thumbnail} alt={name} /></td>\n                                <td>{name.first} {name.last}</td>\n                                <td>{phone}</td>\n                                <td>{email}</td>\n                                <td>{dob.age}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n\n\n        </>\n    )\n\n}\n\nexport default Table;","import React from 'react';\nimport Wrapper from './components/Wrapper';\nimport Header from './components/Header';\nimport Table from './components/Table';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Wrapper>\n        <Header />\n        <Table />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}